* Customs do emacs
  
** destacar parenteses
#+begin_src elisp
    ;; https://www.emacswiki.org/emacs/HighlightParentheses
  (use-package highlight-parentheses
    :ensure t
    :hook
    (prog-mode .
	      (lambda ()
		 (highlight-parentheses-mode)
		 (setq autopair-handle-action-fns
		       (list 'autopair-default-handle-action
			     '(lambda (action pair pos-before)
				(hl-paren-color-update)))))))


   #+end_src
** e-mail
*** mu4e
#+begin_src elisp
  (use-package mu4e
    :ensure nil
    :ensure-system-package mu
    :load-path "/usr/share/emacs/site-lisp"
    :config
    ;; pastinhas
    (setq
     mu4e-maildir       "~/.local/share/Mail"   ;; top-level Maildir
     mu4e-sent-folder   "/Outlook/Enviadas"       ;; folder for sent m essages
     mu4e-trash-folder  "/Outlook/Deletadas"
     mu4e-refile-folder "/Outlook/INBOX"   ;; saved messages
     mu4e-attachment-dir "~/Downloads/Mail")


    (setq mu4e-get-mail-command "mbsync -c ~/.config/isync/mbsyncrc Outlookerson")

    ;; por enquanto este comando não está funcionando no momento
    ;; utilizando systemd no lugar
    ;; (mu4e-update-interval 240)
    (setq mu4e-enable-notifications t
	  ;; enable inline images
	  mu4e-view-show-images t
	  mu4e-index-update-error-warning t
	  mu4e-headers-auto-update t)

    (setq mu4e-change-filenames-when-moving t)
    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
    (setq mu4e-use-fancy-chars t)
    ;; assinatura yay
    (setq user-mail-address "leon_bellini@outlook.com"
	  user-full-name "Leon Ferreira Bellini"
	  mu4e-compose-signature
	  (concat "Leon F. Bellini\n"
		  "Estudante de Ciência da Computação no Centro Universitário FEI\n"

		  "\nGitHub: https://github.com/seleonel\n")))

#+end_src
**** smtpmail
 #+begin_src elisp
   (use-package smtpmail
     :after mu4e
     :init
     (setq message-send-mail-function 'smtpmail-send-it
       smtpmail-stream-type 'starttls
       smtpmail-default-smtp-server "smtp.office365.com"
       smtpmail-smtp-server "smtp.office365.com"
       smtpmail-smtp-service 587))
 ;; todas as informações necessárias carregadas do ~/.authfile.gpg
 #+end_src
 cliente de email bem simples
**** mu4e-alert
 #+begin_src elisp
   (use-package mu4e-alert
     :ensure t
     :after mu4e
     :hook
     (after-init . mu4e-alert-enable-notifications)
     (after-init . mu4e-alert-enable-mode-line-display)
     :init
     (mu4e-alert-set-default-style 'libnotify)
	(setq mu4e-alert-interesting-mail-query
	      (concat
	       "flag:unread"
	       " AND NOT flag:trashed")))

 #+end_src
    
*** mail encrypt
 #+begin_src elisp
 (setq mm-sign-option 'guided)
 (add-hook 'message-send-hook 'mml-secure-message-sign)
 #+end_src
** acentos e caracteres especificos
   #+begin_src emacs-lisp
     (require 'iso-transl)
   #+end_src
   Para a inserção de combinação de carácteres
   e acentos. 
** dired
   #+begin_src emacs-lisp
     (setq image-dired-thumb-margin 5) 
     (with-eval-after-load 'dired
	 (require 'dired-x)
	 (setq dired-guess-shell-alist-user '(
					      ("\\.pdf\\'" "okular ? &")
					      ("\\.mp4\\'" "mpv ? &")
					      ("\\.mkv\\'" "mpv ? &"))))
   #+end_src
*** icons-dired
    #+begin_src emacs-lisp
      (use-package all-the-icons-dired
	:ensure t
	:hook
	(dired-mode . all-the-icons-dired-mode))
    #+end_src
** Yes or No por Y or N
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
Não acho que alguém goste de escrever
"Yes" por inteiro.
** Ido mode
#+begin_src elisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** enabling the current screen buffer (ibuffer)
#+begin_src elisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Midia em geral
*** EMMS
#+begin_src elisp
  ;; configs do uncle dave
  (use-package emms
    :ensure t
    :config
      (require 'emms-setup)
      (require 'emms-player-mpd)
      (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
      (setq emms-seek-seconds 1)
      (setq emms-player-list '(emms-player-mpd))
      (setq emms-info-functions '(emms-info-mpd))
      (setq emms-player-mpd-server-name "localhost")
      (setq emms-player-mpd-server-port "6600")
    :bind
      ("s-m p" . emms)
      ("s-m b" . emms-smart-browse)
      ("s-m r" . emms-player-mpd-update-all-reset-cache)
      ("<C-XF86AudioPrev>" . emms-previous)
      ("<C-XF86AudioNext>" . emms-next)
      ("<C-XF86AudioPlay>" . emms-pause))
#+end_src
**** mpc
 #+begin_src elisp
 (setq mpc-host "localhost:6000")

 #+end_src
**** funcao para atualizar o database
 #+begin_src elisp
 (defun mpd/update-database ()
   "Updates the MPD database synchronously."
   (interactive)
   (call-process "mpc" nil nil nil "update")
   (message "Database atualizado"))
 (global-set-key (kbd "s-m u") 'mpd/update-database)

 #+end_src
**** funcao para iniciar mpd
#+begin_src elisp
(defun mpd/start-music-daemon ()
  "Start MPD, connects to it and syncs the metadata cache."
  (interactive)
  (shell-command "mpd")
  (mpd/update-database)
  (emms-player-mpd-connect)
  (emms-cache-set-from-mpd-all)
  (message "MPD atualizederson"))
(global-set-key (kbd "s-m c") 'mpd/start-music-daemon)
#+end_src
** autosave e backups
Configs roubadas de um anão 2.0
#+begin_src elisp
  (setq-default backup-directory-alist
   '(("." . "~/.cache/emacs/backups/")))
  (add-to-list 'auto-save-file-name-transforms
   `(".*" "~/.cache/emacs/autosave/\\1" t) 'append)
#+end_src
** Mover de acordo com camelCase
#+begin_src elisp
  (global-subword-mode 1)
#+end_src
** aspell 
#+begin_src elisp
(setq ispell-program-name "aspell")
#+end_src
Aspell me parece mais efetivo que ispell.
*** flyspell
#+begin_src elisp
      (dolist (hook '(text-mode-hook))
	(add-hook hook (lambda () (flyspell-mode 1))))
      (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
	(add-hook hook (lambda () (flyspell-mode -1))))
  (setq flyspell-issue-message-flag nil)
  (setq ispell-list-command "--list")
  ;; tudo copiado da wiki
  (global-set-key (kbd "<f8>") 'ispell-word)
  (global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
  (global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
  (global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word)
    )
  (global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)

#+end_src

** Forçar UTF-8
#+begin_src elisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
#+end_src
** emacs daemon
#+begin_src elisp
;; define function to shutdown emacs server instance
(defun matar-server ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
  )

#+end_src
Roubado da wiki, esta funcao mata o daemon e pede para salvar os buffers
** resize melhor
#+begin_src emacs-lisp
  (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-C-<down>") 'shrink-window)
  (global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+end_src
Roubado do witchmacs. Praise Marisa
** salvar clipboard antes de kill
#+begin_src elisp
(setq save-interprogram-paste-before-kill t)
#+end_src
Isso deveria ser *default*.

** gdb
#+begin_src emacs-lisp
  (setq gdb-many-windows t
	gdb-show-main t)
  ;; copiado de https://tuhdo.github.io/c-ide.html
#+end_src
** Keybind
#+begin_src elisp
(global-set-key (kbd "C-c t") 'ansi-term)
#+end_src

** Força zsh no ansi-term
#+begin_src elisp
  (defvar default-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list default-shell)))
  (ad-activate 'ansi-term)
#+end_src
Força zsh como shell do ansi-term
* Modos para uso em geral
** Processos assíncronos
   #+begin_src emacs-lisp
	 (use-package async
	     :ensure t
	     :init
	     (dired-async-mode 1)
	     (async-bytecomp-package-mode 1))
   #+end_src
   Roubado do witchmacs (novamente)
** page-break-lines
#+begin_src elisp
  (use-package page-break-lines
    :ensure t)
#+end_src
** projectile
#+begin_src elisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    :bind
    ("C-S-p" . projectile-command-mode))
#+end_src
** *Which key*
#+begin_src elisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src
** avy
#+begin_src elisp
  (use-package avy
    :ensure t
    :bind
    ("C-c c" . avy-goto-char)
    ("C-c l" . avy-goto-line)
    ("C-c w" . avy-goto-word-1)
    ("C-c y" . avy-copy-line))
#+end_src
*** swiper
 #+begin_src elisp
     (use-package ivy
       :ensure t
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t))
 #+end_src
 Boa função para procurar, mostra as ocorrências num minibuffer 
**** swiper
 #+begin_src emacs-lisp
   (use-package swiper
     :ensure t
     :after ivy
     :bind
     ("C-s" . swiper-isearch)
     ("C-x b" . ivy-switch-buffer))
 #+end_src
**** Counsel
 #+begin_src emacs-lisp 
   (use-package counsel
     :ensure t
     :after ivy
     :config
     (define-key ivy-minibuffer-map (kbd "TAB") 'ivy-partial)
     (define-key counsel-find-file-map (kbd "s-j") '(lambda ()
						      (interactive)
						      (let ((input (ivy--input)))
							(ivy-quit-and-run
							  (counsel-file-jump)))))
     :bind
     ;; replacing emacs defaults with counsel
     ("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     ;; imenu provides a nice alternative to imenu
     ("C-c m" . counsel-imenu)
     ;; file jump is recursive, but kinda slow
     ("C-c J" . counsel-file-jump)
     ;; good for searching elisp functions
     ("C-c i" . counsel-info-lookup-symbol)
     ;; external things
     ("C-c p" . counsel-linux-app)
     ("<f5>" . counsel-compile))

 #+end_src
** magit
#+begin_src elisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+end_src
** autocompletion
#+begin_src elisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    (setq company-selection-wrap-around t)
    (company-tng-configure-default)
    :hook
    (after-init . global-company-mode)
    :bind
    ("s-c" . company-complete))
#+end_src
*** company-irony
#+begin_src elisp
  (use-package company-irony
    :ensure t
    :after company 
    :init
    (add-to-list 'company-backends 'company-irony))
#+end_src
*** ac-js2
#+begin_src elisp
  (use-package ac-js2
    :ensure t
    :after company
    :init
    (add-to-list 'company-backends 'ac-js2-company))
#+end_src
Para javascripto/jsx
*** company-anaconda
#+begin_src elisp
  (use-package company-anaconda
    :ensure t
    :after company
    :init
    (add-to-list 'company-backends 'company-anaconda)
    :hook
    (python-mode . anaconda-mode))
#+end_src
Autocomplete para python 
*** company-latex
**** auctex
#+begin_src elisp
    (use-package company-auctex
      :ensure t
      :after (company tex)
      :init
      (company-auctex-init))
#+end_src
Autocomplete para latex tags
**** math-symbols
#+begin_src elisp
    (use-package company-math
      :ensure t
      :after company 
      :init
      (add-to-list 'company-backends 'company-math-symbols-unicode))
#+end_src
*** quickhelp
#+begin_src elisp
  (use-package company-quickhelp
    :ensure t
    :init
    (setq company-quickhelp-delay 0)
    :hook
    (prog-mode . company-quickhelp-mode))
#+end_src
Mostra documentação automaticamente

*** company-c-headers
#+begin_src elisp
    (use-package company-c-headers
      :ensure t
      :after company 
      :init
      (add-to-list 'company-backends 'company-c-headers))

#+end_src
** browse kill ring
#+begin_src elisp
  (use-package browse-kill-ring
    :ensure t
    :bind
    ("M-y" . 'browse-kill-ring))

#+end_src
** expand region
#+begin_src elisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-c e" . er/expand-region))
#+end_src
** multiple cursors
#+begin_src elisp
  (use-package multiple-cursors
    :ensure t
    :bind
    ("C-c q" . 'mc/mark-next-like-this)
    ("C-c a" . 'mc/mark-all-like-this))

#+end_src
Pacote pra múltiplos cursores.
** sudo-edit
#+begin_src elisp
  (use-package sudo-edit
    :ensure t
    :bind
	("C-c s" . sudo-edit))

#+end_src
** transpose-frame
#+begin_src elisp
  (use-package transpose-frame
    :ensure t)
#+end_src
Pacote para /management/ de janelas

** smart tabs
#+begin_src elisp
(use-package smart-tabs-mode
 :ensure t
 :config
 (smart-tabs-add-language-support latex latex-mode-hook
 ((latex-indent-line . 4)
 (latex-indent-region . 4)))
 (smart-tabs-insinuate 'c 'c++ 'java 'latex)
 (smart-tabs-advice js2-indent-line js2-basic-offset))

#+end_src
esse código copiei de um anão
** define-word
   #+begin_src emacs-lisp
     (use-package define-word
       :ensure t
       :bind
       ("C-c d" . define-word)
       ("C-c u" . define-word-at-point))

   #+end_src
   Bom para procurar significado de palavras.

** undo-tree
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))
#+end_src
** visual-regexp
   #+begin_src emacs-lisp
     (use-package visual-regexp
       :ensure t
       :bind
       ("C-c r" . vr/replace)
       ("C-c k" . vr/query-replace)
       :config
       (use-package visual-regexp-steroids
	 :ensure t))
   #+end_src
** column enforce mode
#+begin_src elisp
  (use-package column-enforce-mode
    :ensure t
    :hook
    (prog-mode . column-enforce-mode)
    (text-mode . column-enforce-mode))

#+end_src
Enforça a regra dos 80(?) caracteres em uma linha, ou pelo menos
só mostra um limite
** Rainbow
*** Rainbow-delimiters
#+begin_src elisp
(use-package rainbow-delimiters
    :ensure t
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src
*** Rainbow mode
#+begin_src elisp
  (use-package rainbow-mode
    :ensure t
    :hook
    (prog-mode . rainbow-mode))
#+end_src
Códigos de cor *hexadecimais* ficam coloridos yay
** Switch window
#+begin_src elisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    :bind
    ([remap other-window] .  switch-window))
#+end_src
** flycheck
#+begin_src elisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

#+end_src

* Configurações do use-package  
** ensure-system-package
#+begin_src elisp
(use-package use-package-ensure-system-package
  :ensure t)
#+end_src
Pacotinho legal para garantir que pacotes externos existem (bom para o mu4e)
* Configurações visuais
** pagina inicial em si
#+begin_src elisp
  ;; ANTIGO BUFFER
  ;;(defun my-buffeiro ()
  ;;  (let ((buffer (generate-new-buffer "intro")))
  ;;    (switch-to-buffer buffer)
  ;;    (center-line)
  ;;    (insert "BEM VINDO AO MARAVILHOSO IMAKKUSU\n")
  ;;    (insert-image (create-image "~/.emacs.d/img/kicchiri.png"))
  ;;    (insert "\n\n\n\n\n")
  ;;    buffer))
  ;;(setq initial-buffer-choice 'my-buffeiro)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
     (setq dashboard-banner-logo-title "BEM VINDO AO MARAVILHOSO IMAKKUSU")
     (setq dashboard-startup-banner (concat (getenv "XDG_CONFIG_HOME") "/emacs/img/kicchiri.png"))
     (setq dashboard-center-content t)
     (setq dashboard-show-shortcuts nil)
     (setq dashboard-items '((recents . 20)
			     (bookmarks . 5)
			     (agenda . 10)
			     (projects . 5)))
     (setq dashboard-set-heading-icons t)
     (setq dashboard-set-file-icons t)
     (dashboard-modify-heading-icons '((recents . "ruby")
				       (bookmarks . "bookmark" )
				       (projects . "package" )))
     ;; adds agenda 
     (setq show-week-agenda-p t)

     (setq dashboard-footer-messages '("emags :DDDDDDDD"))
     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+end_src


*Garanta que a imagem existe pls*

** Fonte
#+begin_src elisp
(setq default-frame-alist '((font . "Hack 12")))

#+end_src
Força por padrão a fonte Hack, tamanho 12

** Barra de tarefas
#+begin_src elisp
(tool-bar-mode -1)
#+end_src
Remove *toda* a barra de tarefas

** mostrar linhazitas
#+begin_src elisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

** Barra de menu
#+begin_src elisp
(menu-bar-mode -1)

#+end_src
Menu é inútil e toma espaço

** Highlight de linha
#+begin_src elisp
(global-hl-line-mode t)
#+end_src

*LINHAS CHAMAM MAIS ATENÇÃO AGR*

** TEMA ATUAL
#+begin_src elisp
  (use-package sublime-themes
     :ensure t
     :init
     (load-theme 'brin t))

#+end_src
Combina mais com o tema atual do meu desktop environment
** modeline
#+begin_src elisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config 
  (setq doom-modeline-mu4e t)
  (setq doom-modeline-bar-width 1)
  (setq doom-modeline-icon 1))
#+end_src
** line numbers
#+begin_src elisp
  (defun mostrarLinhazitas ()
      (interactive)
      (display-line-numbers-mode))
  (add-hook 'prog-mode-hook 'mostrarLinhazitas)

#+end_src
** Barra de scroll(?)
#+begin_src elisp
  (scroll-bar-mode -1)
#+end_src
** Pretty symbols
#+begin_src emacs-lisp
(global-prettify-symbols-mode t)
#+end_src
** all-the-icons
   #+begin_src elisp
  (use-package all-the-icons
    :ensure t)
#+end_src
* Modos para linguagens de programação e markdown

** Yasnippet
#+begin_src elisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    :hook
    (prog-mode . yas-minor-mode))
#+end_src
*** Yasnippet snippets
#+begin_src elisp
  (use-package yasnippet-snippets
    :ensure t)

#+end_src
** C e C++
*** c-headers 
#+begin_src elisp
  (defun c-open-header-in-place ()
       (local-set-key (kbd "C-c h") 'ff-find-other-file))
  (add-hook 'c-initialization-hook 'c-open-header-in-place)
#+end_src
*** irony mode
#+begin_src emacs-lisp 
  (use-package irony
    :ensure t
    :hook
    (c++-mode . irony-mode)
    (c-mode . irony-mode)
    (irony-mode . irony-cdb-autosetup-compile-options))
#+end_src
** Pacotinhos pra mobile/web
*** web-mode
 #+begin_src elisp
   (use-package web-mode
     :ensure t
     :config
     (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))

 #+end_src
*** JS2 mode
#+begin_src elisp
  (use-package js2-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode)))

#+end_src
*** simple-httpd
#+begin_src elisp
  (use-package simple-httpd
    :ensure t)
#+end_src
servidor web "minimalista"
*** skewer mode
#+begin_src elisp
  (use-package skewer-mode
    :ensure t
    :hook
    (js2-mode . skewer-mode)
    (css-mode . skewer-css-mode)
    (html-mode . skewer-html-mode))

#+end_src
Interpretador de forms de html/css/js, também tem um repl


** latex
*** auctex
#+begin_src elisp
  (use-package tex
    :defer t
    :ensure auctex
    :hook
    (LaTeX-mode . visual-line-mode)
    (LaTeX-mode . flyspell-mode)
    (LaTeX-mode . LaTeX-math-mode)
    (LaTeX-mode . turn-on-reftex)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)
    :hook
    (TeX-mode .
	      (lambda ()
		(setq TeX-command-extra-options "-shell-escape")
		)
	      ))

#+end_src 
Para edição aprimorada de documentos TEX
*** latex preview pane
#+begin_src elisp
  (use-package latex-preview-pane
    :ensure t
    :hook
    (LaTeX-mode . latex-preview-pane-mode))
#+end_src
** python
*** flycheck python
    #+begin_src elisp
      (use-package flycheck-pycheckers
	:ensure t
	:after flycheck
	:hook
	(flycheck-mode . flycheck-pycheckers-setup))
    #+end_src
*** pyenv   
#+begin_src elisp
  (use-package pyenv-mode
    :ensure t
    :ensure-system-package pyenv
    :hook
    (pyenv-mode . python-mode))
#+end_src
Permite-me trabalhar com ambientes virtuais
** gnuplot-mode
#+begin_src elisp
(use-package gnuplot-mode
  :ensure t)
#+end_src
Para me auxiliar na plotagem de gráficos para a iniciação
* Org-mode
** Refile
   #+begin_src elisp
     (setq org-refile-targets '((nil :maxlevel . 4)
				(nil :tag . "candidate")
				))
   #+end_src
** Inline Images
#+begin_src elisp
  (setq org-display-inline-images t)
  (setq org-redisplay-inline-images t) 
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width 300)
  (with-eval-after-load 'org
    (add-hook 'org-babel-after-execute-hook
	      '(lambda ()
		 (when org-inline-image-overlays
		   (org-redisplay-inline-images)))))
#+end_src
Mostra por padrão as imagens no próprio buffer do org
** gnuplot
#+begin_src elisp
(use-package gnuplot
  :ensure t)
(use-package gnuplot-mode
  :ensure t)
#+end_src
** gnuplot binding
#+begin_src elisp
(local-set-key "M-C-g" 'org-plot/gnuplot) 
#+end_src
Gnuplot para plotagem de gráficos a partir de tabelas
** plantuml
#+begin_src elisp
      (setq org-plantuml-jar-path (expand-file-name
				   (concat
				    (getenv "XDG_DATA_HOME") "/plantuml/plantuml.jar")))
      (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
#+end_src
Programito bom para desenvolver diagramas de classes e fluxogramas.
*** plantuml-mode
#+begin_src elisp
      (use-package plantuml-mode
	:ensure t
	:config
	(setq plantuml-jar-path (expand-file-name
				 (concat
				  (getenv "XDG_DATA_HOME") "/plantuml/plantuml.jar")))
	(setq plantuml-default-exec-mode 'jar))
#+end_src
** belos simbolos
#+begin_src elisp
  (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
#+end_src
** babel
#+begin_src elisp
    (org-babel-do-load-languages 
     'org-babel-load-languages 
     '((plantuml . t) (python . t) (dot . t)))
#+end_src
Algumas opções de linguagens do babel
** org-superstar
#+begin_src elisp
  (use-package org-superstar
    :ensure t
    :hook
    (org-mode . (lambda () (org-superstar-mode 1)))
    :init
    (setq org-hide-leading-stars nil)
    (setq org-superstar-leading-bullet ?\s)
    (setq org-superstar-prettify-item-bullets t)
    (setq org-superstar-item-bullet-alist
	  '((?* . ?►)
	    (?+ . ?◐)
	    (?- . ?◆))))

#+end_src
Tae um bom nome.

** org-roam
#+begin_src elisp
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory (concat (getenv "HOME") "/Estudo/arquivos-org/"))
    :bind (:map org-roam-mode-map
		(("C-c n l" . org-roam)
		 ("C-c n f" . org-roam-find-file)
		 ("C-c n g" . org-roam-graph))
		:map org-mode-map
		(("C-c n i" . org-roam-insert)))
    :config
    (setq org-roam-index-file "./index.org")
    (require 'org-roam-protocol)
    ;; graphing options
    (setq org-roam-completion-system 'ivy)
    (setq org-roam-graph-viewer "/usr/bin/firefox-esr")
    (setq org-roam-graph-node-extra-config '(
					     ("shape" . "oval")
					     ("style" . "filled")
					     ("fillcolor" . "PaleVioletRed1")
					     ("color" . "VioletRed1")
					     ("fontcolor" . "black")
					     ("fontname" . "Roboto")))
    (setq org-roam-graph-extra-config '(("rankdir" . "BT")))
    (setq org-roam-graph-edge-extra-config '(("dir" . "none")
					     ("color" . "PaleVioletRed1"))))





#+end_src
Bom pra brainstorming
** org-download
   #+begin_src emacs-lisp
     (use-package org-download
       :ensure t
       :custom
       (org-download-method 'directory)
       (org-download-image-dir "~/Pictures/org/")
       (org-download-heading-lvl nil)
       (org-download-screenshot-method "xclip")
       :config
       (require 'org-download)
       (add-hook 'dired-mode-hook 'org-download-enable))

   #+end_src
* *Minhas* funções (algumas roubadas)
** assassino de palavras
#+begin_src elisp
  (defun matarPalavra ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c DEL") 'matarPalavra)

#+end_src














  


