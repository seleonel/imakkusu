* MARAVILHOSA TELA INICIAL
** DEPENDENZAS DO DASHBOARD
*** page-break-lines
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t)
#+END_SRC
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    :bind
    ("S-p" . projectile-command-mode))

#+END_SRC
** pagina inicial em si
#+BEGIN_SRC emacs-lisp
  ;; ANTIGO BUFFER
  ;;(defun my-buffeiro ()
  ;;  (let ((buffer (generate-new-buffer "intro")))
  ;;    (switch-to-buffer buffer)
  ;;    (center-line)
  ;;    (insert "BEM VINDO AO MARAVILHOSO IMAKKUSU\n")
  ;;    (insert-image (create-image "~/.emacs.d/img/kicchiri.png"))
  ;;    (insert "\n\n\n\n\n")
  ;;    buffer))
  ;;(setq initial-buffer-choice 'my-buffeiro)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
     (setq dashboard-banner-logo-title "BEM VINDO AO MARAVILHOSO IMAKKUSU")
     (setq dashboard-startup-banner "~/.emacs.d/img/kicchiri.png")
     (setq dashboard-center-content t)
     (setq dashboard-show-shortcuts nil)
     (setq dashboard-items '((recents . 20)
			     (bookmarks . 5)
			     (projects . 10)))
     (setq dashboard-set-heading-icons t)
     (setq dashboard-set-file-icons t)
     (dashboard-modify-heading-icons '((recents . "ruby")
				       (bookmarks . "bookmark" )
				       (projects . "package" )))
     (setq dashboard-footer "emags :DDDDDDDD")
     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC


*Garanta que a imagem existe pls*

* Configurações visuais
** Fonte
#+BEGIN_SRC emacs-lisp
(set-default-font "Hack 12")

#+END_SRC
Força por padrão a fonte Hack, tamanho 12

** Barra de tarefas
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)

#+END_SRC
Remove *toda* a barra de tarefas

** Barra de menu
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)

#+END_SRC
Menu é inútil e toma espaço

** Highlight de linha
#+BEGIN_SRC emacs-lisp
(when window-system (global-hl-line-mode t))


#+END_SRC
*LINHAS CHAMAM MAIS ATENÇÃO AGR*

** TEMA ATUAL
#+BEGIN_SRC emacs-lisp
  (use-package sublime-themes
     :ensure t
     :init
     (load-theme 'brin t))

#+END_SRC
Combina mais com o tema atual do meu desktop environment
** modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config 
  (setq doom-modeline-bar-width 1)
  (setq doom-modeline-icon 1))
#+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp
  (defun mostrarLinhazitas ()
      (interactive)
      (display-line-numbers-mode))
  (add-hook 'prog-mode-hook 'mostrarLinhazitas)

#+END_SRC
** Barra de scroll(?)
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)

#+END_SRC
* PACOTES GERAIS
** column enforce mode
#+BEGIN_SRC emacs-lisp
  (use-package column-enforce-mode
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'column-enforce-mode)
    (add-hook 'text-mode-hook 'column-enforce-mode))
#+END_SRC
Enforça a regra dos 80(?) caracteres em uma linha, ou pelo menos
só mostra um limite
** *Which key*
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))

#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-." . avy-goto-char))

#+END_SRC
** SMEX
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Rainbow
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC
Códigos de cor *hexadecimais* ficam coloridos yay
** smart tabs
#+BEGIN_SRC emacs-lisp
(use-package smart-tabs-mode
 :ensure t
 :init
 :config
 (smart-tabs-add-language-support latex latex-mode-hook
 ((latex-indent-line . 4)
 (latex-indent-region . 4)))
 (smart-tabs-insinuate 'c 'c++ 'java 'latex))

#+END_SRC
esse código copiei de um anão
** Switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    :bind
    ([remap other-window] .  switch-window))
#+END_SRC
** autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default)
    (ac-complete-yasnippet))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

#+END_SRC
** jedi
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

#+END_SRC
** dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-d" . 'dmenu))
#+END_SRC
pode me ajudar na *multitarefagem*
** browse kill ring
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :bind
    ("M-y" . 'browse-kill-ring))

#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+END_SRC
Boa função para procurar, mostra as ocorrências num minibuffer 
#+BEGIN_CENTER
Entretanto, pode bugar em buffers maiores
#+END_CENTER
** multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    ("C-c q" . 'mc/mark-next-like-this)
    ("C-c a" . 'mc/mark-all-like-this))

#+END_SRC
Pacote pra múltiplos cursores, muito daora
** expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-c e" . er/expand-region))
#+END_SRC
#+BEGIN_CENTER
*EXPANDS EVERYTHING*
#+END_CENTER
** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))

#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
	("C-c C-s" . sudo-edit))

#+END_SRC
** transpose-window
#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame
    :ensure t)
#+END_SRC

Pacote para /management/ de janelas

** auctex
#+BEGIN_SRC emacs-lisp
      (use-package tex
	:defer t
	:ensure auctex
	:config
	(setq TeX-auto-save t)
	(setq TeX-parse-self t)
	(setq-default TeX-master nil)
	(add-hook 'LaTeX-mode-hook 'visual-line-mode)
	(add-hook 'LaTeX-mode-hook 'flyspell-mode)
	(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
	(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
	(setq reftex-plug-into-AUCTeX t)
	(setq TeX-PDF-mode t))
#+END_SRC 
Para edição aprimorada de documentos TEX
  
** gnuplot-mode
#+BEGIN_SRC emacs-lisp
(use-package gnuplot-mode
  :ensure t)
#+END_SRC
Para me auxiliar na plotagem de gráficos para a iniciação
* TERMINAL
** Força zsh no ansi-term
#+BEGIN_SRC emacs-lisp
  (defvar default-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list default-shell)))
  (ad-activate 'ansi-term)

#+END_SRC
Força zsh como shell do ansi-term

** Keybind
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-t") 'ansi-term)

#+END_SRC

* *GERAIS*
** Yes or No por Y or N
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC
** Ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)

#+END_SRC
** enabling the current screen buffer (ibuffer)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)

#+END_SRC
** switching buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-s") 'ido-switch-buffer)

#+END_SRC
** janela org
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)

#+END_SRC
abre editor do org mode na janela atual
** assassino de palavras
#+BEGIN_SRC emacs-lisp
  (defun matarPalavra ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c DEL") 'matarPalavra)

#+END_SRC
** mostrar linhazitas
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)

#+END_SRC
** copiar linhazitas
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c y") 'avy-copy-line)
#+END_SRC

** EMMS
#+BEGIN_SRC emacs-lisp
  ;; configs do uncle dave
  (use-package emms
    :ensure t
    :config
      (require 'emms-setup)
      (require 'emms-player-mpd)
      (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
      (setq emms-seek-seconds 1)
      (setq emms-player-list '(emms-player-mpd))
      (setq emms-info-functions '(emms-info-mpd))
      (setq emms-player-mpd-server-name "localhost")
      (setq emms-player-mpd-server-port "6600")
    :bind
      ("s-m p" . emms)
      ("s-m b" . emms-smart-browse)
      ("s-m r" . emms-player-mpd-update-all-reset-cache)
      ("<C-XF86AudioPrev>" . emms-previous)
      ("<C-XF86AudioNext>" . emms-next)
      ("<C-XF86AudioPlay>" . emms-pause))
#+END_SRC
*** mpc
#+BEGIN_SRC emacs-lisp
(setq mpc-host "localhost:6000")

#+END_SRC
** funcao para atualizar o database
#+BEGIN_SRC emacs-lisp
(defun mpd/update-database ()
  "Updates the MPD database synchronously."
  (interactive)
  (call-process "mpc" nil nil nil "update")
  (message "Database atualizado"))
(global-set-key (kbd "s-m u") 'mpd/update-database)

#+END_SRC
*** funcao para iniciar mpd
#+BEGIN_SRC emacs-lisp
(defun mpd/start-music-daemon ()
  "Start MPD, connects to it and syncs the metadata cache."
  (interactive)
  (shell-command "mpd")
  (mpd/update-database)
  (emms-player-mpd-connect)
  (emms-cache-set-from-mpd-all)
  (message "MPD atualizederson"))
(global-set-key (kbd "s-m c") 'mpd/start-music-daemon)
#+END_SRC
** autosave e backups
Configs roubadas de um anão 2.0
#+BEGIN_SRC emacs-lisp
  (setq-default backup-directory-alist
   '(("." . "~/.cache/emacs/backups/")))
  (add-to-list 'auto-save-file-name-transforms
   `(".*" "~/.cache/emacs/autosave/\\1" t) 'append)

#+END_SRC
** multimonitor

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-'") 'other-frame)

#+END_SRC
Permite-me trocar facilmente por entre janelas
** Mover de acordo com camelCase
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Yasnippetx
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode))
#+END_SRC
*** Yasnippet snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)

#+END_SRC
** hunspell
#+BEGIN_SRC emacs-lisp
  (setenv
   "DICPATH"
   "/usr/share/hunspell")

  (setq ispell-program-name "hunspell")

#+END_SRC
*** flyspell
#+BEGIN_SRC emacs-lisp
    (dolist (hook '(text-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
      (add-hook hook (lambda () (flyspell-mode -1))))
(setq flyspell-issue-message-flag nil)

#+END_SRC
*** auto dictionary
#+BEGIN_SRC emacs-lisp
  (use-package auto-dictionary
      :ensure t
      :config
      (add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1))))

#+END_SRC
** gnuplot
#+BEGIN_SRC emacs-lisp
(use-package gnuplot
  :ensure t)
(use-package gnuplot-mode
  :ensure t)
#+END_SRC
*** gnuplot binding
#+BEGIN_SRC emacs-lisp
(local-set-key "M-C-g" 'org-plot/gnuplot) 
#+END_SRC
** Forçar UTF-8
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
#+END_SRC
** emacs daemon
#+BEGIN_SRC emacs-lisp
;; define function to shutdown emacs server instance
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
  )

#+END_SRC
Roubado da wiki, esta funcao mata o daemon e pede para salvar os buffers
