#+TITLE: Configs e pacotes em geral de meu Emacs/My config files for GNU/Emacs (28)
#+property: header-args :comments org :tangle init.el 

Descobri boa parte destes pacotes através dos vídeos do *Uncle Dave*, então,
créditos a ele: [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/feed][Link para o canal]]. Créditos também a [[https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g][Protesilaos Stavrou]] por
seus ótimos tutoriais introdutórios para certos pacotes considerados "nicho".


* Tangling

Por ser um arquivo primariamente escrito e feito para o =org-mode=, este deve ser "exportado" para um =init.el= apropriado através da função ~org-babel-tangle~ a qual "escreve" todos os blocos de código (menos alguns escritos em /bash/) nele. Uma forma fácil de se realizar isso (durante uma primeira instalação, por exemplo) pode ser através da execução do /script/ presente no diretório raiz do projeto

: ./tangle.sh

O /script/ em si foi modificado a partir do apresentado no *manual do org*, especificamente na parte [[info:org#Batch Execution][org#Batch Execution]]

#+begin_src sh :tangle tangle.sh :comments no :shebang "#!/bin/sh"
emacs -Q --batch --eval "
      (let ((file \"organizator.org\"))
        (require 'ob-tangle)
	(with-current-buffer (find-file-noselect file)
	  (org-babel-tangle)))"
#+end_src

* Dependências

Todas as configurações foram testadas (e utilizadas) em sistemas
GNU/Linux. Algumas das dependências externas seriam:

- SBCL (implementação de common lisp, modificar =lisp-inferior-process=)
- lsp (language server protocol)
  - pyls (python)
  - digestif (latex) (externo)
  - ccls (C/C++)
- ttc-iosevka  & ibm-plex (fontes)
- plantuml.jar (elaboração de diagramas)
- pacotes latex
  - listings (export de *src blocks*)
- aspell (dicionários e checker)
  - aspell-pt
  - aspell-en
- GnuPG
- notmuch (e-mail)

** comando para arch-likes

*** Repositórios oficiais

#+begin_src sh :tangle no
sudo pacman --noconfirm -S emacs \
    sbcl \
    notmuch \
    python-lsp-server \
    ccls \
    aspell-pt \
    aspell-en \
    gnupg \
    ttf-ibm-plex \
    ttc-iosevka
#+end_src

*** AUR

#+begin_src sh :tangle no :dir /tmp
function digestif_install
{
    git clone https://aur.archlinux.org/digestif.git
    cd digestif
    makepkg -sic
}

digestif_install
#+end_src

* Keybindings

Algumas das combinações de teclas modificadas neste arquivo. Note que algumas foram remapeadas a partir dos comandos padrões do Emacs. 

** Emacs

- =C-M-<backspace>= delete-indentation
- =C-z= undo
- =C-{= undo-redo
- =C-x C-b= ibuffer
- =C-c t= eshell
- Flyspell
  - =M-n= flyspell-goto-next-error
- comandos de janela
  - =s-C-<left>= shrink-window-horizontally
  - =s-C-<right>= enlarge-window-horizontally
  - =s-C-<down>= shrink-window
  - =s-C-<up>= enlarge-window
- icomplete
  - =C-n= icomplete-forward-completions
  - =C-p= icomplete-backward-completions
- flymake
  - =M-n= flymake-goto-next-error
  - =M-p= flymake-goto-prev-error

** Pacotes

- =C-c p= Projectile map
- =C-x g= Magit
- =C-c e= er/expand-region
- =C-x o= switch-window
- =C-c n= org-roam-map
- =M-.= marginalia-cycle
- Consult
  - =C-c m= consult-imenu
  - =C-x b= e =C-x 4 b= consult-buffer e consult-buffer-other-window (alternativa ao =switch-to-buffer=)
  - =C-c g= consult-grep
  - =M-g g= consult-goto-line (alternativa ao =goto-line=)
  - =C-c o= consult-outline
  - =C-c x= consult-complex command
  - =M-y= consult-yank-from-kill-ring (alternativa ao antigo =browse-kill-ring=)
- company
  - =M-<TAB>= company-complete    
- eglot (enquanto modo ativo)
  - =C-c r= eglot-rename
  - =C-c a= eglot-code-actions
  - =C-c f= eglot-format
    
* Customs do Emacs

Emacs tem umas boas funcionalidades já integradas. Estas, ocasionalmente
apresentam valores por /default/  não muito interessantes para uso em
computadores mais modernos. 

** Preferência por pacotes mais recentes

=load= carrega o primeiro arquivo que vê. Não queremos isso com a compilação nativa

#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

** Desativar package.el

Gerenciador de pacotes padrão do Emacs. Como *straight.el* é o utilizado para
este propósito no momento, não queremos conflitos.  

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

** Straight.el

Gerenciador de pacotes mais interessante por utilizar-se do Melpa como base,
mas com um adicional. *Straight* faz o /pull/ direto dos repositórios dos
programadores do github/gitlab. Necessário realizar um processo de
/bootstrapping/ ao menos na primeira vez.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq straight-use-package-by-default t)
(straight-use-package 'use-package)  	; nosso "assistente" de configuração
#+end_src

** plist macro randômico

Inútil? Só montei esse macro para me economizar tecladas.

#+begin_src emacs-lisp
(defmacro plist-change (plist key new-item)
  "Change the property of a plist's value given a key.

``PLIST'' : symbol that references the property list that will get changed.

``KEY'': key part of the pair

``NEW-ITEM'': value part of the pair

Adds in a new key with that value otherwise"
  `(setq ,plist (plist-put ,plist ,key ,new-item)))
#+end_src

** Dired

Ou *directory editor*, meu principal meio de navegação pelo sistema de arquivos
de sistemas GNU/Linux.

#+begin_src emacs-lisp
(use-package dired
  :straight nil
  :custom
  (dired-listing-switches "-alhg --group-directories")
  (image-dired-thumb-margin 5)
  (dired-dwim-target t)
  :hook
  (dired-mode . dired-hide-details-mode))
#+end_src

*** Dired-x

Extensão para o =dired=, permite que eu associe extensões a certas ações para
serem executadas (=mpv= para vídeos, =wine= para executáveis do /windows/,
=libreoffice= para documentos do /office/, etc.).

#+begin_src emacs-lisp
(use-package dired-x
  :straight nil
  :after dired
  :custom
  (dired-guess-shell-alist-user `((,(rx "." (or "mp4"
						"mp3"
						"mkv"
						"webm"
						"flac"
						"gif")) "mpv ? &")
				  (,(rx "." (or "docx" "doc" "xlsx")) "libreoffice ? &")
				  (,(rx ".html") "chromium ? &")
				  (,(rx ".exe") "wine ? &"))))
#+end_src

** Reativar comandos

Alguns comandos vêm *desativados* por padrão, alguns deles eu considero bem úteis. 

#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil) 	
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

** Recentf

Mantém os *x* arquivos recentes em um arquivo em disco.

#+begin_src emacs-lisp
(use-package recentf
  :init
  (recentf-mode)
  (run-at-time nil (* 30 60) 'recentf-save-list)
  :custom
  (recentf-max-saved-items 50)
  (recentf-exclude
   (list "^\\(~\\|/\\).*/\\(Games\\|Downloads\\|tmp\\|.?cache\\|roam\\|artigos\\)/.*$")))
#+end_src

** Flyspell

Corretor /built-in/ com alguns padrões sãos, mas nem todos.

#+begin_src emacs-lisp
(use-package flyspell
  :straight nil
  :custom
  (ispell-program-name "aspell")
  (flyspell-issue-message-flag nil)
  :bind
  (:map flyspell-mode-map
	("M-n" . flyspell-goto-next-error))
  :hook
  (text-mode . flyspell-mode))
#+end_src

** Org-mode

Poderoso modo com sua própria linguagem de marcação perfeita para prática de
programação letrada, anotações, registro em diário, exportação para LaTeX e
HTML, criação de tabelas e devo ter esquecido de algo. *Pretty neat*

#+begin_src emacs-lisp
(use-package org
  :config
  ;; set which languagues are enabled for evaluation
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (lisp . t)
     (C . t)
     (scheme . t)
     (shell . t)))
  ;; configure the latex previews default size
  (plist-change org-format-latex-options :scale 1.4)
  ;; default agenda file, setting this variable to a single string didn't work
  (add-to-list 'org-agenda-files (expand-file-name "agenda.org" org-directory))
  :bind
  ("C-c c". org-capture)
  ("C-c s" . org-store-link)
  :custom
  ;; specially useful if the point is at the beggining of a headline, allowing
  ;; the user to delete the subtree
  (org-special-ctrl-k t)
  (org-startup-align-all-tables t)
  ;; indent-mode turned on for all org files
  (org-startup-indented t)
  ;; sub and superscripts are shown like what you'd see in a wgwys editor also
  ;; turn on all pretty symbols
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts t)
  ;; each heading specified by imenu is a tree node this defines how deep imenu
  ;; can search through it
  (org-imenu-depth 3)
  ;; source code gets aligned with the leftmost column
  (org-src-preserve-indentation t)
  ;; how to open a window for the src when ``C-c \' '' gets pressed
  (org-src-window-setup 'split-window-below)
  ;; start folded at the highest level node-wise
  (org-startup-folded t)
  ;; show all inline images at startup. Current buffer still needs refreshing
  ;; after a new image gets added
  (org-startup-with-inline-images t)
  (org-image-actual-width 600)
  ;; by default babel tries to eval src_blocks with slime,
  ;; but since sly is our main way to interact with CL
  ;; we mustchange that eval function
  (org-babel-lisp-eval-fn 'sly-eval)
  ;; levels 1 through 4 are targets for refiling
  (org-refile-targets '((nil :maxlevel . 4)
			(nil :tag . "candidate")))
  ;; all files used by capture are stored here
  (org-directory (expand-file-name "Documents/org" "~"))
  ;; capture and its templates
  (org-capture-templates '(("g" "Guitar training" entry
			    (file+headline "training_guitar.org" "Progress")
			    (file (expand-file-name "guitemplate" org-directory)))
			   ("b" "Bookmarks" entry
			    (file+headline "bookmarks.org" "Important links")
			    "* %^{Link's description} \nLink: %a")
			   ("c" "Interesting code" entry
			    (file+headline "snippets.org" "Some nice code snippets")
			    "* %^{SRC block's description}\n\n%?\n#+BEGIN_SRC %^{Language}\n%i\n#+END_SRC")
			   ("r" "Random notes" entry
			    (file+headline "notes.org" "Random")
			    "* %^{Descriptive title for the note} \n\n%i%?")
			   ("a" "Agenda entry" entry
			    (file+headline "agenda.org" "Events")
			    "* TODO %^{What kind of event?} %^G\n%^{Select|SCHEDULED|DEADLINE|Regular stamp}: %^T\nDescription: %?" :empty-lines 1)))
  :hook
  (org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode)
  :custom-face
  (org-table ((t (:inherit 'fixed-pitch))))
  (org-block ((t (:inherit 'fixed-pitch)))))
#+end_src

*** ox-latex

Listings e colorização para blocos de código.

#+begin_src emacs-lisp
(use-package ox-latex
  :straight nil
  :custom
  (org-latex-listings t)
  (org-latex-listings-options '(("basicstyle" "\\scriptsize")
				("showstringspaces" "false")
				("numberstyle" "\\tiny")
				("breaklines" "true")
				("numbers" "left")))
  :config
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color")))
#+end_src

** E-mail

Algumas configurações devem ser feitas em relação ao diretório de e-mail, bem como customizações relacionadas a diretórios, assinaturas, nomes e senhas. 

*** Informações

Para a definição do endereço de e-mail pelo próprio Emacs. 

#+begin_src emacs-lisp
(setq mail-host-address "outlook.com")
(setq user-login-name "leon_bellini")
(setq user-full-name "Leon Ferreira Bellini")
#+end_src

*** Assinatura

É inserida logo após todas as minhas mensagens.  Aparentemente o prefixo =--= é inserido automaticamente agora. 

#+begin_src emacs-lisp
(setq mail-signature
      (format "%s - Estudante de Ciência da Computação" user-full-name))
#+end_src

*** smtpmail

Protocolo =smtp= é responsável pela conexão e definição de como realizar tal
conexão com servidores =smtp=. =smtpmail= é um pacote útil para realizar o
envio de mensagens *externamente* ao sistema.

#+begin_src emacs-lisp
(use-package smtpmail
  :custom
  (message-send-mail-function 'smtpmail-send-it)
  (send-mail-function 'smtpmail-send-it)
  (smtpmail-stream-type 'starttls)
  (smtpmail-default-smtp-server "smtp.office365.com")
  (smtpmail-smtp-server "smtp.office365.com")
  (smtpmail-smtp-service 587))
#+end_src

** fill-column

Limite de caracteres por linha. Este será assegurado se =auto-fill-mode= ou
=visual-line-mode= estiverem ativos.

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

** Auto-fill

Também conhecido como *hard-wrap*. =auto-fill= modifica o arquivo ao criar uma
nova linha a cada *x* caracteres numa linha (dependente do valor de
=fill-column=).

#+begin_src emacs-lisp
(add-hook 'text-mode-hook (lambda ()
			    (unless (eq major-mode 'org-mode)
			      (auto-fill-mode))))
#+end_src

** Aviso de arquivo pesado

Útil em conjunto com operações através do TRAMP (SSH e SFTP).

#+begin_src emacs-lisp
(setq large-file-warning-threshold nil)
#+end_src

** Desativar o maldito cursor piscante

#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

** Morte ao C-z

=C-z= minimiza o Emacs. Tais comandos não funcionam bem em gerenciadores de
janela por *tiling*. 

#+begin_src emacs-lisp
(define-key global-map (kbd "C-z") 'undo)
#+end_src

** Destacar parênteses

#+begin_src emacs-lisp
(use-package show-paren
  :straight nil
  :custom
  (show-paren-style 'expression)
  :hook
  (prog-mode . show-paren-mode))
#+end_src

** Completar parênteses

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'electric-pair-mode)
#+end_src

** Indentação automática

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'electric-indent-local-mode)
#+end_src

** acentos e caracteres específicos

Para a inserção de combinação de caracteres e acentos.

#+begin_src emacs-lisp
(require 'iso-transl)
#+end_src

** Yes or No por Y or N

Não acho que alguém goste de escrever "Yes" por inteiro. Apenas "y" necessário.

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Ibuffer

Listagem de todos os /buffers/ o qual implementa  alguns comandos já presentes em outros modos como =d= para marcar deleção, =m= para marcar, =o= para abrir em outra janela, etc.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Icomplete

Experimentando o  =icomplete= como sistema de completa (?) padrão. Como este já é integrado ao emacs e oferece um bom suporte a /fuzzy/ searching, creio que possa já substituir o bom e velho =ivy=.

#+begin_src emacs-lisp
(use-package icomplete
  :demand t
  :custom
  (completion-styles '(flex substring))
  (icomplete-max-delay-chars 0)
  (icomplete-compute-delay 0)
  (completion-ignore-case t)
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (icomplete-show-matches-on-no-input t)
  :config
  (icomplete-mode)
  (icomplete-vertical-mode)
  :bind
  (:map icomplete-minibuffer-map
	("C-n" . icomplete-forward-completions)
	("C-p" . icomplete-backward-completions)
	("C-q" . shift-completions)))
#+end_src

** autosave e backups

Configs roubadas de um anão 2.0

#+begin_src emacs-lisp
;;; Get our cache directory, otherwise throw them all into the tmp dir
(defvar cache-dir (expand-file-name "emacs" (or (getenv "XDG_CACHE_HOME")
						temporary-file-directory)))


(setq-default backup-directory-alist
	      `(("." . ,(expand-file-name "backups" cache-dir))))

(add-to-list 'auto-save-file-name-transforms
	     `(".*" ,(concat cache-dir "/autosave/\\1") t) 'append)
#+end_src

** Salvar clipboard antes de kill

Clipboard do *X* server. 

#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src

** gdb

Copiado de [[https://tuhdo.github.io/c-ide.html][Tuhdo]]

#+begin_src emacs-lisp
(setq gdb-many-windows t
      gdb-show-main t)
#+end_src

** Eshell agora oficial

Melhor =shell= por também interpretar =emacs-lisp=. Não suporta redirecionamento
reverso =<= e tem seus próprios programas para realizar algumas tarefas.

Todos os =shells= não funcionam bem com programas =ncurses=.

#+begin_src emacs-lisp
(defun eshell-janela-abaixo ()
  (interactive)
  (mapc #'call-interactively '(split-window-below other-window eshell)))
(global-set-key (kbd "C-c t") 'eshell-janela-abaixo)
#+end_src

** Flymake

*Built-in* para erros de sintaxe, tem como alternativa "externa" o /flycheck/ (removido desta configuração).

#+begin_src emacs-lisp
(use-package flymake
  :hook
  (prog-mode . flymake-mode)
  :bind
  (:map flymake-mode-map
	("M-n" . flymake-goto-next-error)
	("M-p" . flymake-goto-prev-error)))
#+end_src

** Re-builder

Não utiliza tantas barras para caracteres especiais
#+begin_src emacs-lisp
(setq reb-re-syntax 'string)
#+end_src

** abbrev

Expansões baseadas num prefixo (yasnippet funciona a partir deles), devem ser definidos explicitamente.

#+begin_src emacs-lisp
(use-package abbrev
  :straight nil
  :hook
  ((text-mode prog-mode) . abbrev-mode)
  :custom
  (abbrev-suggest t)
  (save-abbrevs 'silently))
#+end_src

** delete-indentation

Função útil não apenas na formatação de S-exps, mas também em outras linguagens. Une a linha atual com a anterior, apagando a indentação.

#+begin_src emacs-lisp
(global-set-key (kbd "C-M-<backspace>") 'delete-indentation)
#+end_src

Normalmente tem como combinação =M-^=, algo complicado de se fazer num teclado ABNT-2.

** redo

Desfaz um desfazer.

#+begin_src emacs-lisp
(global-set-key (kbd "C-{") 'undo-redo)
#+end_src

* Modos para uso em geral

Pacotes para os mais diversos usos. Alguns desses estão presentes por serem
dependências ou terem sido utilizados no passado.

** Consult

Oferece inúmeros comandos com utilização em conjunto com o =icomplete= (neste caso, ele também é compatível com outras funções). 

#+begin_src emacs-lisp
(use-package consult
  :custom
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref)
  :config
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  :bind
  ("C-c m" . consult-imenu)
  ;; #grep-regexp#filter-string
  ;; grep-regexp is passed to grep to interpret
  ;; filter-string benefits from emacs' completion narrowing capabilities
  ;; you can also pass arguments to grep: #defun -- --invert-match#
  ("C-c g" . consult-grep)
  ;; f SPC shows recent files
  ;; m bookmarks
  ;; p project
  ("C-x b" . consult-buffer)
  ("C-x 4 b" . consult-buffer-other-window)
  ;; replacement for the old browse-kill-ring
  ("M-y" . consult-yank-from-kill-ring)
  ("M-g g" . consult-goto-line)
  ;; ``consult-outline'' prompts for a pseudo-heading in a file it can be either
  ;; a function, a comment header or even a "real" outline (I think)
  ("C-c o" . consult-outline)
  ;; same function as ``repeat-complex-command'', but it integrates better
  ;; with the minibuffer
  ("C-c x" . consult-complex-command))
#+end_src

** Marginalia

Oferece documentação em /minibuffers/, porém integrado às APIs oferecidas pelo emacs.

#+begin_src emacs-lisp
(use-package marginalia
  :bind
  (:map minibuffer-local-map
	("M-." . marginalia-cycle))
  :init
  (marginalia-mode))
#+end_src

** pdf-tools

Melhor que o =doc-view=  para pdf. Um tanto quanto pesado. 

#+begin_src emacs-lisp
(use-package pdf-tools
  :defer t
  :init
  (pdf-loader-install))
#+end_src

** Visual-fill-column 
   
   Interessante quando combinado com =nov= (talvez org). =visual-fill-column= é
   melhor combinado com o =visual-line-mode= para forçar o /soft-wrap/ num
   determinado valor ao invés do limite de uma janela.
   
#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook
  (visual-line-mode . visual-fill-column-mode))
#+end_src
   
** nov.el

Leitor de formato =epub=. Tentei utilizar uma fonte com serifa, mas sem obter
resultados agradáveis.

#+begin_src emacs-lisp
(use-package nov
  :custom
  (nov-text-width t)
  (visual-fill-column-center-text t)
  :mode
  ("\\.epub\\'" . nov-mode)
  :hook
  (nov-mode . visual-line-mode))
#+end_src

** Processos assíncronos

Roubado do witchmacs (novamente). Torna padrão a chamada assíncrona de
processos =M-S-&= em alguns casos pré definidos (dired e compilação).

#+begin_src emacs-lisp
(use-package async
  :defer t
  :config
  (dired-async-mode 1)
  (async-bytecomp-package-mode 1))
#+end_src

** projectile

Pacote para trabalho com inúmeros projetos/integração com um único
projeto. Também dependência do dashboard.

#+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode 1)
  :bind-keymap
  ("C-c p" . projectile-command-map))
#+end_src

** *Which key*

Realiza a função do =C-h= quando este é utilizado após um prefixo. Demonstra os
possíveis comandos a partir de uma combinação. 

#+begin_src emacs-lisp
(use-package which-key
  :hook
  (after-init .  which-key-mode))
#+end_src

** magit

Simples e eficaz. O melhor /front-end/ (porcelana?) para =git=. 

#+begin_src emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status))
#+end_src

** Corfu

Interessante melhoria ao já presente metodo de *completion-at-point* do Emacs ao oferecer um popup semelhante ao que o ~company~ faz, porém utilizando-se de /child-frames/. 

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-auto t)
  :init 
  (corfu-global-mode))
#+end_src

*** Corfu-doc

Irmão do ~company-quickhelp~.

#+begin_src emacs-lisp
(use-package corfu-doc
  :bind
  (:map corfu-map
	("M-p" . corfu-doc-scroll-down)
	("M-n" . corfu-doc-scroll-up))
  :hook
  (corfu-mode . corfu-doc-mode))
#+end_src

** transpose-frame

Troca as janelas de lugar. Também oferece =flop-frame= para inverter as janelas
na horizontal e =flip-frame= na vertical. 

#+begin_src emacs-lisp
(use-package transpose-frame
  :defer t)
#+end_src

** smart tabs

Força =tab= para indentação e espaço para alinhamento.

#+begin_src emacs-lisp
(use-package smart-tabs-mode
  :defer t
  :config
  (smart-tabs-add-language-support latex latex-mode-hook
    ((latex-indent-line . 4)
     (latex-indent-region . 4)))
  (smart-tabs-insinuate 'c 'c++ 'java 'latex)
  (smart-tabs-advice js2-indent-line js2-basic-offset))
#+end_src

** Rainbow

Para parênteses, colchetes e chaves coloridas. Auxilia na programação.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

=rainbow-mode= por sua vez mostra os códigos de cor hexadecimais em suas
respectivas cores.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook
  (prog-mode . rainbow-mode))
#+end_src

** Switch window

Substitui =other-window= ao permitir mais de uma troca. Também mais dinâmico que =windmove-.*=

#+begin_src emacs-lisp
(use-package switch-window
  :custom
  (switch-window-shortcut-style 'qwerty)
  (switch-window-minibuffer-shortcut ?m)
  :bind
  ([remap other-window] .  switch-window))
#+end_src

** notmuch

~notmuch.el~ é um pacote destinado apenas para gerenciamento e, principalmente, /tagging/ de e-mails, dependendo de programas externos (como o próprio notmuch) para realização da busca e download em si destes. ~notmuch~ se provou mais rápido e menos complexo que o ~gnus~ para a utilização diária. 

#+begin_src emacs-lisp
(use-package notmuch
  :custom
  (notmuch-search-oldest-first nil))
#+end_src

*** Mbsync

Como dito anteriormente, o pacote *depende* de um programa que realize a busca das mensagens por meio de protocolos como IMAP ou POP3. No caso, o programa escolhido foi o ~mbsync~ com a seguinte configuração (tirada da [[https://wiki.archlinux.org/title/Isync][arch wiki]]).

#+begin_src sh :tangle no :comments no
IMAPAccount Outlook
Host outlook.office365.com
User leon_bellini@outlook.com
PassCmd "pass mail/Outlook" # I manage my passwords with pass
# security
AuthMech LOGIN
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

# remote
IMAPStore Outlook-remote
Account Outlook

# local 
MaildirStore Outlook-local
Subfolders Verbatim
Path ~/.local/share/Mail/Outlook/
Inbox ~/.local/share/Mail/Outlook/INBOX/

# channels
Channel Outlook-inbox
Far :Outlook-remote:
Near :Outlook-local:
Patterns "INBOX"
CopyArrivalDate yes

Channel Outlook-sent
Far :Outlook-remote:"Sent"
Near :Outlook-local:enviadas
Create Near
CopyArrivalDate yes 

Group Outlook-group
Channel Outlook-inbox
Channel Outlook-sent
#+end_src

*** Systemd unit e systemd timer

Para que haja um /fetching/ automático, é necessária a criação de uma unidade de usuário com os detalhes quanto ao serviço a ser executado periodicamente.

#+begin_src sh :tangle no :comments no
[Unit]
Description=Email fetching through  mbsync

[Service]
Type=oneshot
ExecStart=/usr/bin/mbsync -c %h/.config/isync/mbsyncrc -Va
ExecStartPost=/usr/bin/notmuch new 
#+end_src

E o /timer/ o qual será ativado pelo ~systemd~, definindo o tempo entre as atualizações (a cada 5 minutos, 1 minuto após /boot/).

#+begin_src sh :tangle no
[Unit]
Description=Timer that sets the intervals between updates

[Timer]
OnBootSec=1m
OnUnitActiveSec=5m
Unit=mbsync.service

[Install]
WantedBy=timers.target
#+end_src

* Configurações visuais

Estilo, fontes e cores.

** Página inicial

Uma página inicial *apropriada*.

#+begin_src emacs-lisp
(use-package dashboard
  :init
  (dashboard-setup-startup-hook)
  :custom
  (dashboard-banner-logo-title "BEM VINDO AO MARAVILHOSO IMAKKUSU")
  (dashboard-startup-banner (expand-file-name "img/kicchiri.png"
					      user-emacs-directory))
  (dashboard-center-content t)
  (dashboard-show-shortcuts nil)
  (dashboard-items '((recents . 20)
		     (bookmarks . 5)
		     (projects . 5)))
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  ;; adds agenda
  (show-week-agenda-p t)
  (dashboard-footer-messages '("emags :DDDDDDDD"))
  (initial-buffer-choice #'(lambda () (get-buffer "*dashboard*"))))
#+end_src

** Fontes

Vídeo do Prot me inspirou a dividir por entre as fontes a serem utilizadas
por todo o sistema. 

#+begin_src emacs-lisp
(defvar contextual-fonts-alist '((default . "Iosevka Light")
				 (fixed-pitch . "Iosevka Fixed Light")
				 (variable-pitch . "IBM Plex Sans"))
  "Define which fonts should be loaded depending on a given face.")
#+end_src

*** Função principal para definir todas as fontes

#+begin_src emacs-lisp
(defun set-fonts ()
  "Set the faces specified in ``CONTEXTUAL-FONTS-ALIST'' for different pitches.
Said faces can assume the following properties:

``default'' : Default font used through the whole Emacs 'ecosystem'

``fixed-pitch'' : This one is used mainly in programming modes and/or
src blocks in org mode

``variable-pitch'' : Used best with ``variable-pitch-mode'', it
'''contextually''' gets its size changed (like when used in an
org heading, for example)"
  (let ((size-in-pts (if (= 1080 (display-pixel-height))
			 14
		       12)))
    (mapc #'(lambda (fonts-alist)
	      (set-face-attribute (car fonts-alist)
				  nil
				  :font (format "%s-%s" (cdr fonts-alist)
						size-in-pts)))
	  contextual-fonts-alist)))
#+end_src

*** Definindo as fontes no servidor

Como o servidor *não cria um frame inicialmente*. Temos que atrasar a
definição das fontes para o momento em que um frame é criado. 

#+begin_src emacs-lisp
;; sets a hook if daemon mode is 'on', also sets fonts regardless if emacs's
;; running on terminal or not. Afaik it doesn't matter if the fonts are set
;; while on term
(if (daemonp)
    (add-hook 'server-after-make-frame-hook #'set-fonts)
  (set-fonts))
#+end_src

** Telephone-line

Visualmente mais simples que a ~doom-modeline~.

#+begin_src emacs-lisp
(use-package telephone-line
  :config
  (telephone-line-mode t)
  :custom
  ;; U:**@- buffer-name > file-size > git:master
  (telephone-line-lhs '((nil . (telephone-line-buffer-segment))
			(accent . (telephone-line-filesize-segment ))
			(nil . (telephone-line-vc-segment
				telephone-line-process-segment))))
  ;; ELISP/d (nil) < projectile (accent) < misc All (6, 22)
  (telephone-line-rhs '((nil . (telephone-line-major-mode-segment))
			(accent . (telephone-line-atom-encoding-segment))
			(nil . (telephone-line-misc-info-segment
				telephone-line-position-segment)))))
#+end_src

** Retirar a barra de tarefas

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** Contador de linha e coluna

#+begin_src emacs-lisp
(line-number-mode)
(column-number-mode)
#+end_src

** Retirando a barra de menu

#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

** Highlight de linha

Destaca a linha atual onde o cursor se posiciona.

#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

** Tema atual

- Branco e padrão: =modus-operandi=
- High contrast: =modus-vivendi=

#+begin_src emacs-lisp
(use-package modus-themes
  :init
  (modus-themes-load-themes)
  :config
  (modus-themes-load-operandi)
  :custom-face
  (show-paren-match-expression ((t (:inherit modus-themes-special-cold)))))
#+end_src

** Número de linhas

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Barra de scroll

#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src

** Pretty symbols

Símbolos com representação em *unicode*, como lambda serão substituídos por
tal código/caractere, mas desativados quando o ponteiro localiza-se sobre o símbolo.

#+begin_src emacs-lisp
(global-prettify-symbols-mode)
(setq prettify-symbols-unprettify-at-point t)
#+end_src

** all-the-icons

Ícones utilizados por uma grande quantidade de pacotes.

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Column indicator mode

Linha posicionada à direita do buffer para sinalizar o "limite". Útil em
conjunto com alguns linters como Python+pylint que chegam a ser irritantes
com o estouro do "limite" de caracteres.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

* Modos para linguagens de programação e markdown

Pacotes para edição e programação de algumas linguagens específicas (ou conjuntos delas), além de um modo de comunicação com servidores baseados no protocolo =lsp=. No momento, estarei usando =eglot= para este propósito.

** Eglot

Semelhante ao =lsp-mode=, porém, este se diz ser mais leve (não duvido), além de ser menos *bugado*. =Eglot= permite essa conexão com inúmeros servidores *lsp*, permitindo que o *emacs* aja como uma IDE, além de delegar o trabalho de correção, análise semântica e /tagging/ para estes servidores

#+begin_src emacs-lisp
(use-package eglot
  :bind
  (:map eglot-mode-map
	("C-c k" . eglot-format)
	("C-c a" . eglot-code-actions)
	("C-c r" . eglot-rename))
  :hook
  ((python-mode c-mode-common TeX-mode LaTeX-mode bibtex-mode) . eglot-ensure))
#+end_src

** Common Lisp

Por muitos anos, Slime foi vendido como a melhor forma de integrar com
CL, estarei utilizando =sly= para CL, entretanto.

#+begin_src emacs-lisp
(use-package sly
  :defer t
  :custom
  (inferior-lisp-program "sbcl"))
#+end_src

** Scheme

*Chibi* é minimo e compacto, apenas necessitando build no momento (pelo menos no Arch). Modificando =scheme-program-name= permite-me executar programas em scheme através da função =run-scheme=. 

#+begin_src emacs-lisp
(setq scheme-program-name "chibi-scheme")

;; run-scheme por padrão utiliza a janela atual,
;; este advice já cria uma nova ANTES do comando
(defun before-scheme-window (&optional cmd)
  (split-window-below)
  (call-interactively 'other-window))

;; Then always run it before run-scheme is called
(advice-add 'run-scheme :before #'before-scheme-window)
#+end_src

Pode ser obtido do AUR (já instalando em /usr/bin por padrão).

#+begin_src sh :tangle no
function chibi_install {
    git clone https://aur.archlinux.org/chibi-scheme.git
    cd chibi-scheme
    makepkg -sic
}

chibi_install
#+end_src

Como alternativa, há também o [[https://github.com/ashinn/chibi-scheme][repositório do chibi no github]].

*** Geiser e Guile

Gostaria de manter alguma consistência, mas isso não está sendo possível com o =geiser-chibi=. Para execução de scheme em src blocks do org, utilizarei-me do
guile (presente na maioria das distros) + geiser (integração com scheme externo)

#+begin_src emacs-lisp
(use-package geiser-guile
  :custom
  (geiser-default-implementation 'guile))
#+end_src

** Paredit

Utiliza-se de /keybindings/ mais fáceis de lembrar que /lispy/, ao menos para um usuário de emacs.

#+begin_src emacs-lisp
(use-package paredit
  :hook
  ((lisp-mode scheme-mode emacs-lisp-mode) . paredit-mode))
#+end_src

** Pacotinhos pra mobile/web

Eu ouvi *sites*?

*** web-mode

#+begin_src emacs-lisp
(use-package web-mode
  :defer t
  :mode "\\.html?\\'")
#+end_src

*** impatient mode

Interpretador de forms de html/css/js, também tem um REPL.

#+begin_src emacs-lisp
(use-package impatient-mode
  :defer t)
#+end_src

** LaTeX

A linguagem de /markdown/ que todo mundo ama e odeia. Também tem bom suporte
nativo no Emacs e o servidor =lsp=  (digestif) "completa" essa integração.

*** AUCTeX

#+begin_src emacs-lisp
(use-package auctex
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master nil)
  (TeX-electric-sub-and-superscript t)
  :hook
  (LaTeX-mode . LaTeX-math-mode)
  (TeX-after-compilation-finished-functions . TeX-revert-document-buffer))
#+end_src

*** RefTeX

Providencia um suporte interessante para referências e documentos em citações em documentos *TeX ao permitir acesso facilitado a partes do documento, acesso a =labels= e citações.

#+begin_src emacs-lisp
(use-package reftex
  :after auctex
  :custom
  (reftex-plug-into-AUCTeX t)
  :hook
  (LaTeX-mode . turn-on-reftex))
#+end_src

** Org-mode

   Pacotes extras que se utilizam do *PODER* do =org= ou apenas se integram a ele.

*** org-superstar

Asteriscos de cada heading agora são bullets. 

#+begin_src emacs-lisp
(use-package org-superstar
  :defer t
  :hook
  (org-mode . org-superstar-mode)
  :custom
  (org-hide-leading-stars nil)
  (org-superstar-leading-bullet ?\s)
  (org-superstar-prettify-item-bullets t)
  (org-superstar-item-bullet-alist '((?* . ?►) (?+ . ?◐) (?- . ?◆))))
#+end_src

*** org-roam

Método Zettel para criação de pequenas e sucintas notas. Bom pra
brainstorming. *Nota*: Migrado para =org-roam= v2.

#+begin_src emacs-lisp
(use-package org-roam
  :config
  (setq org-roam-v2-ack t)
  (org-roam-db-autosync-mode)
  :custom
  (org-roam-directory (expand-file-name "Documents/roam" "~"))
  :bind
  ("C-c n l" . org-roam-buffer-toggle)
  ("C-c n f" . org-roam-node-find))
#+end_src

*** org-download

=org-download= salva e insere as imagens que baixa/retira da área de cópia num
buffer de org.

#+begin_src emacs-lisp
(use-package org-download
  :bind
  (:map org-mode-map
	("C-c d" . org-download-clipboard))
  :custom
  (org-download-method 'directory)
  (org-download-screenshot-method 'xclip)
  :hook
  ((org-mode dired-mode) . org-download-enable))
#+end_src

** Markdown-mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode
  ("README\\.md\\'" . gfm-mode)
  ("\\.\\(md\\|markdown\\|mkd\\)\\'" . markdown-mode)
  :custom
  (markdown-command "multimarkdown"))
#+end_src

