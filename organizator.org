#+title: Imakkusu configs, electric boogaloo
* Customs do emacs
** Auto-fill
   #+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src
** Aviso de arquivo pesado
   #+begin_src emacs-lisp
(setq large-file-warning-threshold nil)
   #+end_src
   Eu vivo no perigo
** Disable no maldito cursor piscante
   #+begin_src emacs-lisp
(blink-cursor-mode 0)
   #+end_src
** Morte ao C-z
   #+begin_src emacs-lisp
(define-key global-map (kbd "C-z") 'undo)
   #+end_src
** destacar e completar parenteses
   #+begin_src emacs-lisp
(add-hook 'prog-mode-hook '(lambda ()
			     (electric-pair-mode)
			     (show-paren-mode)))
   #+end_src
** regras de indentacao
   #+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'electric-indent-local-mode)
   #+end_src
** e-mail
*** default directories
**** Default message directory
     #+begin_src emacs-lisp
(setq message-directory "~/Email-and-news/mail/")
     #+end_src
*** smtpmail
    #+begin_src emacs-lisp
(use-package smtpmail
  :custom
  (message-send-mail-function 'smtpmail-send-it)
  (send-mail-functon 'smtpmail-send-it)
  (smtpmail-stream-type 'starttls)
  (smtpmail-default-smtp-server "smtp.office365.com")
  (smtpmail-smtp-server "smtp.office365.com")
  (smtpmail-smtp-service 587))
;; todas as informações necessárias carregadas do ~/.authfile.gpg
    #+end_src
    cliente de email bem simples
*** notify
    #+begin_src emacs-lisp
(use-package gnus-desktop-notify
  :hook
  (gnus-before-startup  . gnus-desktop-notify-mode))
    #+end_src
*** COMMENT mail encrypt                                                   
    #+begin_src emacs-lisp
(setq mm-sign-option 'guided)
(add-hook 'message-send-hook 'mml-secure-message-sign)
    #+end_src
*** org-msg
    #+begin_src emacs-lisp
(use-package org-msg
  :init
  (org-msg-mode)
  :custom
  (org-msg-greeting-fmt "\nOlá %s,\n\n")
  (org-msg-recipient-names '(("leon_bellini@outlook.com" "Leon Bellini")))
  (org-msg-greeting-name-limit 2)
  (org-msg-default-alternatives '(html text))
  (org-msg-convert citation t)
  (org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"))
    #+end_src
** acentos e caracteres específicos
   #+begin_src emacs-lisp
(require 'iso-transl)
   #+end_src
   Para a inserção de combinação de caracteres
   e acentos. 
*** dired-gnus
    #+begin_src emacs-lisp
(autoload 'gnus-dired "gnus-dired" "dired integration with gnus" t)
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
	(set-buffer buffer)
	(when (and (derived-mode-p 'message-mode)
		   (null message-sent-message-via))
	  (push (buffer-name buffer) buffers))))
    (nreverse buffers)))
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
    #+end_src
** Yes or No por Y or N
   #+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
   Não acho que alguém goste de escrever
   "Yes" por inteiro.
** enabling the current screen buffer (ibuffer)
   #+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
   #+end_src
** autosave e backups
   Configs roubadas de um anão 2.0
   #+begin_src emacs-lisp
(setq-default backup-directory-alist
	      '(("." . "~/.cache/emacs/backups/")))
(add-to-list 'auto-save-file-name-transforms
	     `(".*" "~/.cache/emacs/autosave/\\1" t) 'append)
   #+end_src
** Mover de acordo com camelCase
   #+begin_src emacs-lisp
(global-subword-mode)
   #+end_src
** Forçar UTF-8
   #+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
   #+end_src
** emacs daemon
   #+begin_src emacs-lisp
(defalias 'matar-server 'save-buffers-kill-emacs)
   #+end_src
   Roubado da wiki, esta funcao mata o daemon e pede para salvar os buffers
** resize melhor
   #+begin_src emacs-lisp
(global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "s-C-<down>") 'shrink-window)
(global-set-key (kbd "s-C-<up>") 'enlarge-window)
   #+end_src
   Roubado do witchmacs. Praise Marisa
** salvar clipboard antes de kill
   #+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
   #+end_src
   Isso deveria ser *default*.

** gdb
   #+begin_src emacs-lisp
(setq gdb-many-windows t
      gdb-show-main t)
;; copiado de https://tuhdo.github.io/c-ide.html
   #+end_src
** Eshell agora oficial
   #+begin_src emacs-lisp
(defun eshell-janela-abaixo ()
  (interactive)
  (mapc #'call-interactively '(split-window-below other-window eshell)))
(global-set-key (kbd "C-c t") 'eshell-janela-abaixo)
   #+end_src
   Eshell é muito bom para ser ignorado
** Re-builder
   #+begin_src emacs-lisp
(setq reb-re-syntax 'string)
   #+end_src
   Não utiliza tantos backlashes para escaping.
* Modos para uso em geral
** HTTP requests
   #+begin_src emacs-lisp
(use-package request
  :defer t)
   #+end_src
** volume
   #+begin_src emacs-lisp
(use-package volume
  :defer t)
   #+end_src
   Controle de volume pelo emacs, combina bem com
   bongo. 
** tablist
   #+begin_src emacs-lisp
(use-package tablist
  :defer t)
   #+end_src
** pdf-tools
   #+begin_src emacs-lisp
(use-package pdf-tools
  :defer t
  :init
  (pdf-loader-install))
   #+end_src
** nov.el
   #+begin_src emacs-lisp
(use-package nov
  :custom
  (nov-text-width 80)
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  :hook
  (nov-mode . (lambda () (face-remap-add-relative 'variable-pitch :family "FreeSerif"
						  :height 1.2))))
   #+end_src
** Processos assíncronos
   #+begin_src emacs-lisp
(use-package async
  :defer t
  :config
  (dired-async-mode 1)
  (async-bytecomp-package-mode 1))
   #+end_src
   Roubado do witchmacs (novamente)
** auth-sources
#+begin_src emacs-lisp
(use-package auth-source
  :custom
  (auth-sources '("~/Infos/authinfo.gpg")))
#+end_src
** page-break-lines
   #+begin_src emacs-lisp
(use-package page-break-lines
  :defer t)
   #+end_src
** projectile
   #+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode 1)
  :bind-keymap
  ("C-c f" . projectile-command-map))
   #+end_src
** *Which key*
   #+begin_src emacs-lisp
(use-package which-key
  :hook
  (after-init .  which-key-mode))
   #+end_src
** avy
   #+begin_src emacs-lisp
(use-package avy
  :bind
  ("C-c l" . avy-goto-line)
  ("C-c w" . avy-goto-word-1)
  ("C-c y" . avy-copy-line))
   #+end_src
*** ivy
    #+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  :custom
  (ivy-use-virtual-buffers t)
  (enable-recursive-minibuffers t))
    #+end_src
    **** swiper
    #+begin_src emacs-lisp
(use-package swiper
  :after ivy
  :bind
  ("C-c p" . swiper-isearch)
  ("C-x b" . ivy-switch-buffer))
    #+end_src
**** Counsel
     #+begin_src emacs-lisp 
(use-package counsel
  :after ivy
  :config
  (define-key counsel-find-file-map (kbd "s-j") #'(lambda ()
						    (interactive)
						    (let ((input (ivy--input)))
						      (ivy-quit-and-run
							(counsel-file-jump)))))
  :bind
  ;; replacing emacs defaults with counsel
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("C-h f" . counsel-describe-function)
  ("C-h v" . counsel-describe-variable)
  ;; imenu provides a nice alternative to imenu
  ("C-c m" . counsel-imenu)
  ;; file jump is recursive, but kinda slow
  ("C-c J" . counsel-file-jump)
  ;; good for searching emacs-lisp functions
  ("C-c i" . counsel-info-lookup-symbol)
  ;; external things
  ("C-c g" . counsel-git-grep)
  ("<f5>" . counsel-compile)
  ("<f9>". counsel-org-capture))
     #+end_src
** magit
   #+begin_src emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status))
   #+end_src
** LSP-mode
   #+begin_src emacs-lisp
(use-package lsp-mode
  :ensure-system-package (pyls . python-language-server)
  :init (setq lsp-keymap-prefix "C-c ]")
  :hook (((python-mode js2-mode) . lsp)
	 (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp
  :custom
  ;; shows breadcrumb line and change its default layout
  (lsp-headerline-breadcrumb-mode t)
  (lsp-headerline-breadcrumb-segments '(project file symbols))

  ;; shows all possible code actions available
  (lsp-modeline-code-actions-mode t))

(use-package lsp-ui :commands lsp-ui-mode)
;; ivy integration
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;; treemacs integration gives me nice icons so why not
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
   #+end_src
** Debugging (DAP-mode)
   #+begin_src emacs-lisp
(use-package dap-mode
  :custom
  (dap-auto-configure-features '(sessions locals control tooltip)))
   #+end_src
*** python debugging
    #+begin_src emacs-lisp
(add-hook 'python-mode-hook #'(lambda () (require 'dap-python)))
    #+end_src
*** C/C++ debugging
    #+begin_src emacs-lisp
(add-hook 'c-mode-hook  #'(lambda () (require 'dap-lldb)))
    #+end_src
** autocompletion
   #+begin_src emacs-lisp
(use-package company
  :config
  (define-key company-active-map (kbd "<return>") nil)
  (define-key company-active-map (kbd "RET") nil)
  :custom
  (company-idle-delay 0)
  (company-minimum-prefix-length 2)
  (company-selection-wrap-around t)
  (company-tng-configure-default)
  :hook
  (after-init . global-company-mode))
   #+end_src
*** quickhelp
    #+begin_src emacs-lisp
(use-package company-quickhelp
  :custom
  (company-quickhelp-delay 1.5)
  :hook
  (prog-mode . company-quickhelp-mode))
    #+end_src
    Mostra documentação automaticamente.
** browse kill ring
   #+begin_src emacs-lisp
(use-package browse-kill-ring
  :bind
  ("M-y" . 'browse-kill-ring))
   #+end_src
** expand region
   #+begin_src emacs-lisp
(use-package expand-region
  :bind
  ("C-c e" . er/expand-region))
   #+end_src
** multiple cursors
   #+begin_src emacs-lisp
(use-package multiple-cursors
  :bind
  ("C-c q" . 'mc/mark-next-like-this)
  ("C-c a" . 'mc/mark-all-like-this))
   #+end_src
   Pacote pra múltiplos cursores.
** sudo-edit
   #+begin_src emacs-lisp
(use-package sudo-edit
  :bind
  ("C-c s" . sudo-edit))
   #+end_src
** transpose-frame
   #+begin_src emacs-lisp
(use-package transpose-frame
  :defer t)
   #+end_src
   Pacote para /management/ de janelas

** smart tabs
   #+begin_src emacs-lisp
(use-package smart-tabs-mode
  :defer t
  :config
  (smart-tabs-add-language-support latex latex-mode-hook
    ((latex-indent-line . 4)
     (latex-indent-region . 4)))
  (smart-tabs-insinuate 'c 'c++ 'java 'latex)
  (smart-tabs-advice js2-indent-line js2-basic-offset))
   #+end_src
   esse código copiei de um anão
** undo-tree
   #+begin_src emacs-lisp
(use-package undo-tree
  :defer t
  :init
  (global-undo-tree-mode))
   #+end_src
** Rainbow
*** Rainbow-delimiters
    #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
    #+end_src
*** Rainbow mode
    #+begin_src emacs-lisp
(use-package rainbow-mode
  :hook
  (prog-mode . rainbow-mode))
    #+end_src
    Códigos de cor *hexadecimais* ficam coloridos yay
** Ace window
   #+begin_src emacs-lisp
(use-package ace-window
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (aw-background nil)
  :bind
  ([remap other-window] .  ace-window))
   #+end_src
** bongo
   #+begin_src emacs-lisp
(use-package bongo
  :defer t
  :custom
  (bongo-default-directory "~/Music")
  (bongo-insert-whole-directory-trees t)
  (bongo-display-playback-mode-indicator t)
  (bongo-display-inline-playback-progress t)
  (bongo-enabled-backends '(mpv vlc)))
   #+end_src
** flycheck
   #+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :config
  (global-flycheck-mode t))
   #+end_src
   
* Configurações visuais
** pagina inicial 
   #+begin_src emacs-lisp
(use-package dashboard
  :init
  (dashboard-setup-startup-hook)
  :custom
  (dashboard-banner-logo-title "BEM VINDO AO MARAVILHOSO IMAKKUSU")
  (dashboard-startup-banner (concat user-emacs-directory "img/kicchiri.png"))
  (dashboard-center-content t) 
  (dashboard-show-shortcuts nil)
  (dashboard-items '((recents . 20)
		     (bookmarks . 5)
		     (agenda . 10)
		     (projects . 5)))
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  ;; adds agenda 
  (show-week-agenda-p t)
  (dashboard-footer-messages '("emags :DDDDDDDD"))
  (initial-buffer-choice #'(lambda () (get-buffer "*dashboard*"))))
   #+end_src


   *Garanta que a imagem existe pls*

** Fonte
   #+begin_src emacs-lisp
(setq default-frame-alist '((font . "Iosevka Light 12")))
   #+end_src
** Barra de tarefas
   #+begin_src emacs-lisp
(tool-bar-mode -1)
   #+end_src
   Remove *toda* a barra de tarefas

** mostrar linhazitas
   #+begin_src emacs-lisp
(line-number-mode)
(column-number-mode)
   #+end_src

** Barra de menu
   #+begin_src emacs-lisp
(menu-bar-mode -1)
   #+end_src
   Menu é inútil e toma espaço

** Highlight de linha
   #+begin_src emacs-lisp
(global-hl-line-mode)
   #+end_src

   *LINHAS CHAMAM MAIS ATENÇÃO AGR*

** TEMA ATUAL
   
*** Tema branco
    #+begin_src emacs-lisp
(use-package modus-operandi-theme
  :defer t
  :init
  (load-theme 'modus-operandi t)) 
    #+end_src
** modeline
   #+begin_src emacs-lisp
(use-package doom-modeline
  :hook
  (window-setup . doom-modeline-mode)
  :custom
  (doom-modeline-icon t)) 
   #+end_src
** line numbers
   #+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+end_src
** Barra de scroll(?)
   #+begin_src emacs-lisp
(scroll-bar-mode -1)
   #+end_src
** Pretty symbols
   #+begin_src emacs-lisp
(global-prettify-symbols-mode)
   #+end_src
** all-the-icons
   #+begin_src emacs-lisp
(use-package all-the-icons)
   #+end_src
*** ivy-rich
    #+begin_src emacs-lisp
(use-package ivy-rich
  :after all-the-icons-ivy-rich
  :init
  (ivy-rich-mode 1)
  :config
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  :custom
  (ivy-rich-path-style 'abbrev))
    #+end_src
***** all the icons ivy
      #+begin_src emacs-lisp
(use-package all-the-icons-ivy-rich
  :after (ivy counsel swiper)
  :defer t
  :init (all-the-icons-ivy-rich-mode 1))
      #+end_src
** Column indicator mode
   #+begin_src emacs-lisp
(setq-default fill-column 80)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
   #+end_src
* Modos para linguagens de programação e markdown
** common lisp
   #+begin_src emacs-lisp
;; common lisp implementation that I've chosen
(setq inferior-lisp-program "sbcl")

(use-package slime
  :config
  (slime-setup '(slime-fancy slime-company))
  :hook
  (common-lisp-mode . slime)
  :custom
  (slime-repl-history-file
   (concat (getenv "XDG_CACHE_HOME") "/slime-history.eld")))
   #+end_src
*** slime-company
    #+begin_src emacs-lisp
(use-package slime-company
  :defer t
  :after (slime company))
    #+end_src
** lispy
   #+begin_src emacs-lisp
(use-package lispy
  :hook
  ((emacs-lisp-mode lisp-mode) . lispy-mode))

;; lispy on eval expression
(defun conditionally-enable-lispy ()
  (when (eq this-command 'eval-expression)
    (lispy-mode 1)))
(add-hook 'minibuffer-setup-hook 'conditionally-enable-lispy)
   #+end_src
** Yasnippet
   #+begin_src emacs-lisp
(use-package yasnippet
  :hook
  (prog-mode . yas-minor-mode))
   #+end_src
*** Yasnippet snippets
    #+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet
  :defer t)
    #+end_src
** C e C++
*** LSP server
    #+begin_src emacs-lisp
(use-package ccls
  :ensure-system-package ccls
  :hook
  ((c-mode c++-mode) . (lambda () (require 'ccls) (lsp))))
    #+end_src
** Pacotinhos pra mobile/web
*** web-mode
    #+begin_src emacs-lisp
(use-package web-mode
  :defer t
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
    #+end_src
*** htmlize
    #+begin_src emacs-lisp
(use-package htmlize
  :defer t)
    #+end_src
*** simple-httpd
    #+begin_src emacs-lisp
(use-package simple-httpd
  :defer t)
    #+end_src
    servidor web "minimalista"
*** impatient mode
    #+begin_src emacs-lisp
(use-package impatient-mode
  :defer t)
    #+end_src
    Interpretador de forms de html/css/js, também tem um repl
** latex
*** auctex
    #+begin_src emacs-lisp
(use-package tex
  :defer t
  :straight auctex
  :hook
  (LaTeX-mode . visual-line-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master nil)
  (reftex-plug-into-AUCTeX t)
  (TeX-PDF-mode t)
  :hook
  (TeX-mode .
	    (lambda ()
	      (setq TeX-command-extra-options "-shell-escape"))))
    #+end_src 
    Para edição aprimorada de documentos TEX
*** LSP
    #+begin_src emacs-lisp
(use-package lsp-latex
  :ensure-system-package texlab
  :hook
  ((TeX-mode LaTeX-mode bibtex-mode) . lsp))
    #+end_src
** Org-mode
*** olivetti mode
    #+begin_src emacs-lisp
(use-package olivetti
  :defer t
  :custom
  (olivetti-body-width 80))
    #+end_src
    Melhor para a escrita de documentos. 
*** plantuml
    Programito bom para desenvolver diagramas de classes e fluxogramas.
    #+begin_src emacs-lisp
(setq jar-path (expand-file-name
		(concat
		 (getenv "XDG_DATA_HOME") "/plantuml/plantuml.jar")))
(use-package plantuml-mode
  :defer t
  :custom
  (plantuml-jar-path jar-path)
  (org-plantuml-jar-path jar-path)
  (plantuml-default-exec-mode 'jar))
    #+end_src
*** org-superstar
    #+begin_src emacs-lisp
(use-package org-superstar
  :defer t
  :hook
  (org-mode . org-superstar-mode)
  :custom
  (org-hide-leading-stars nil)
  (org-superstar-leading-bullet ?\s)
  (org-superstar-prettify-item-bullets t)
  (org-superstar-item-bullet-alist '((?* . ?►)
				     (?+ . ?◐)
				     (?- . ?◆))))
    #+end_src
    Tae um bom nome.
*** org-roam
    #+begin_src emacs-lisp
(use-package org-roam
  :hook
  (after-init . org-roam-mode)
  :bind (:map org-roam-mode-map
	      (("C-c n l" . org-roam)
	       ("C-c n f" . org-roam-find-file)
	       ("C-c n g" . org-roam-graph)
	       ("C-c n d" . org-roam-dailies-find-date))
	      :map org-mode-map
	      (("C-c n i" . org-roam-insert)))
  :init
  (autoload 'org-roam-protocol "org-roam-protocol"
    "org roam's way of dealing with external input"
    t)
  :custom
  (org-roam-directory (concat (getenv "HOME") "/Estudo/arquivos-org/"))
  (org-roam-index-file "./index.org")
  ;; graphing options
  (org-roam-completion-system 'ivy)
  (org-roam-graph-viewer "/usr/bin/firefox-esr")
  (org-roam-graph-node-extra-config '(
				      ("shape" . "oval")
				      ("style" . "filled")
				      ("fillcolor" . "PaleVioletRed1")
				      ("color" . "VioletRed1")
				      ("fontcolor" . "black")
				      ("fontname" . "Roboto")))
  (org-roam-graph-extra-config '(("rankdir" . "BT")))
  (org-roam-graph-edge-extra-config '(("dir" . "none")
				      ("color" . "PaleVioletRed1"))))
    #+end_src
    Bom pra brainstorming
*** org-download
    #+begin_src emacs-lisp
(use-package org-download
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "~/Pictures/org/")
  (org-download-heading-lvl nil)
  (org-download-screenshot-method 'xclip)
  :hook
  (org-mode . (lambda ()
		(require 'org-download)
		(local-set-key (kbd "C-c d") 'org-download-clipboard)))
  (dired-mode . org-download-enable))


    #+end_src
*** moderncv
    #+begin_src emacs-lisp
(use-package ox-moderncv
  :straight (:host gitlab :repo "Titan-C/org-cv")
  :init (require 'ox-moderncv))
    #+end_src
* *Minhas* funções (algumas roubadas)
** numeros aleatorios num dado range
   #+begin_src emacs-lisp
(defun numero-random (user-input)
  "Gera um numero com a quantidade de digitos especificada pelo user."
  (interactive "s Insira a quantidade de dígitos: ")
  (let ((string-to-transform ""))
    (dotimes (i (string-to-number user-input))
      (setq string-to-transform (concat string-to-transform (calc-eval "random(10)"))))
    (insert string-to-transform)))
   #+end_src
** Função horrível para enviar screenshot num buffer de mail
   #+begin_src emacs-lisp
(defun mail-screenshot-from-clipboard (string-user)
  "Attaches an image in which filename's defined by the user.
     Said image is always saved in /tmp/<filename>.
     This function depends on xclip existing within the system."
  (interactive "sPlease type in a filename for the attachment: ")
  (let* ((filename-to-save (concat "/tmp/" string-user ".png"))
	 (installed-? (executable-find "xclip"))
	 (command-to-save (format "xclip -selection clipboard -o > %s" filename-to-save)))
    (if installed-?
	(if (zerop (shell-command command-to-save))
	    (with-current-buffer (current-buffer)
	      (mail-add-attachment filename-to-save))
	  (print "Xclip has failed to save the file"))
      (print "Need xclip to run!"))))
   #+end_src
** Integração de company com o yasnippet
   Roubado da [[https://www.emacswiki.org/emacs/CompanyMode][EmacsWiki]].
   #+begin_src emacs-lisp
(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
	(backward-char 1)
	(if (looking-at "->") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
	    (null (do-yas-expand)))
	(if (check-expansion)
	    (company-complete-common)
	  (indent-for-tab-command)))))

(global-set-key (kbd "M-<tab>") 'tab-indent-or-complete)
   #+end_src
